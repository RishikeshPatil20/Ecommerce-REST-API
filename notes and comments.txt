
## **REST API Design**

**REST APIs are stateless**, meaning each request from the client to the server must contain all the information the server needs to fulfill the request. The server does not store any session data about the client between requests. This stateless nature requires an efficient way to manage user authentication and authorization across multiple requests, which is where **JSON Web Tokens (JWT)** come in.

JWT allows the server to issue tokens after verifying user credentials (such as username and password). These tokens are then sent with each request, ensuring the server can authenticate and authorize users without needing to store session data. Because JWT is stateless, it scales better for large applications as the server does not need to maintain session information for each user.

---

Here’s how the rest of the content follows this key idea:

---

## **HTTP Response Status Codes**

### **Informational (100-199)**
- Used to indicate interim responses, meaning the request has been received and the process is continuing.

### **Success (200-299)**
- **200 OK** – The request was successful, and the response contains the requested data.
- **201 Created** – The request was successful, and a new resource was created (typically for POST requests).

### **Redirection (300-399)**
- These codes indicate that the client must take additional action to complete the request, such as being redirected to a different URL.

### **Client Error (400-499)**
- **400 Bad Request** – The request is malformed or contains invalid data.
- **401 Unauthorized** – Authentication is required and has either failed or hasn’t been provided.
- **403 Forbidden** – The server understood the request, but the client does not have permission to access the resource.
- **404 Not Found** – The requested resource could not be found.

### **Server Error (500-599)**
- **500 Internal Server Error** – The server encountered an unexpected condition that prevented it from fulfilling the request.
- **503 Service Unavailable** – The server is not ready to handle the request, usually due to overload or maintenance.

---

## **Product Model and API Endpoints**

### **Product Properties**
- `id`: Unique identifier for the product.
- `name`: Product name.
- `description`: Detailed description of the product.
- `price`: Price of the product.
- `category`: Category to which the product belongs.
- `sizes`: Available sizes for the product.
- `imageUrl`: URL of the product image.

### **API Endpoints**

#### **Add Product**
- **POST /product**
- Adds a new product to the database (Admin only).

#### **Read Products**
- **GET /product** – Fetch all products.
- **GET /product/:id** – Fetch a product by its ID (e.g., `/product/1`).

#### **Edit Product**
- **PUT /product/:id** – Update a product’s details by ID (Admin only).

#### **Delete Product**
- **DELETE /product/:id** – Remove a product by ID (Admin only).

---

## **Filtering Products**

### **Filter API Endpoint**
- **GET /product/filter**
  - **Query Parameters**:
    - `minPrice`: Minimum price filter (default: `-1`).
    - `maxPrice`: Maximum price filter (default: `100000`).
    - `categories`: Array of categories to filter by (default: `[]`).
  
  **Response**: Returns all products that match the filter criteria.

---

## **Authentication and Authorization**

### **User Roles**
- **Customer**: Can rate and order products.
- **Admin**: Can manage (add, edit, delete) products.
- **Unauthenticated Users**: Can view and filter products.

### **Authentication**
- **Basic Authentication**: Requires storing and sending the user’s credentials (username and password) in each request. It is not encrypted (only base64-encoded), making it insecure.
- **JWT (JSON Web Token)**: A more secure, stateless token-based authentication method.

#### **JWT Components**
1. Header: Contains metadata about the token, such as the type of token (JWT) and the hashing algorithm used (e.g., HMAC SHA256 or RSA).

2 .Payload: Contains the claims, which are the statements about an entity (typically, the user) and additional data. For example, the payload might include user ID, username, and expiration time of the token.

3 .Signature: Ensures that the token hasn't been altered. It is created by taking the encoded header, encoded payload, and a secret key, and then hashing them together using the algorithm specified in the header.


#### **JWT Process**
1. User logs in with credentials.
2. If credentials are valid, a JWT is generated.
3. For subsequent requests (e.g., adding a product), the JWT is sent in the request header and verified on the server.

---

## **Product Rating System**

### **Rate a Product**
- **POST /rate-product**
  - Payload:
    ```json
    {
      "product_id": -1,
      "user_id": 3,
      "rating": 2
    }
    ```
  - Steps:
    1. Verify the user exists.
    2. Verify the product exists.
    3. Check if the user has already rated the product. If yes, overwrite the existing rating; if no, create a new entry.
  
  - **Ratings Example**:
    ```json
    {
      "name": "Product A",
    }